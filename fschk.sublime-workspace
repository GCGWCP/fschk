{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"pri",
				"primary_key"
			],
			[
				"tmp",
				"tmp_file_list\tstatement"
			],
			[
				"decal",
				"declarative_base\timport"
			],
			[
				"par",
				"parser\tstatement"
			],
			[
				"parse",
				"parse_args\tfunction"
			],
			[
				"con",
				"conf"
			],
			[
				"table",
				"tables"
			],
			[
				"db",
				"db_is_instantiated\tfunction"
			],
			[
				"app",
				"app_env"
			],
			[
				"dec",
				"declarative_base\timport"
			],
			[
				"sql",
				"sqlalchemy"
			],
			[
				"test",
				"test_traverse_file_list\tstatement"
			],
			[
				"test_dir",
				"test_dirs_first_branch\tstatement"
			],
			[
				"test_file",
				"test_file_list"
			],
			[
				"test_f",
				"test_file_list\tstatement"
			],
			[
				"asser",
				"assertEqual\tstatement"
			],
			[
				"file",
				"file_list\tstatement"
			],
			[
				"test_di",
				"test_dirs_first_branch\tstatement"
			],
			[
				"ass",
				"assertEqual\tfunction"
			],
			[
				"clas",
				"classmethod\tdecorator"
			],
			[
				"com",
				"combinations_with_replacement\tclass"
			],
			[
				"re",
				"result"
			],
			[
				"det",
				"detector\tstatement"
			],
			[
				"ha",
				"hash_bytestr_iter\tfunction"
			],
			[
				"root",
				"root_path\tstatement"
			],
			[
				"creae",
				"create_db\tfunction"
			],
			[
				"ex",
				"ext_attr\tstatement"
			],
			[
				"as",
				"ashexstr\tparam"
			],
			[
				"get",
				"get_file_info\tfunction"
			],
			[
				"page",
				"page_format\tstatement"
			],
			[
				"lin",
				"link_list\tstatement"
			],
			[
				"link",
				"link_text\tstatement"
			],
			[
				"format",
				"format_disambiguation\tfunction"
			],
			[
				"forma",
				"format_disambiguation\tfunction"
			],
			[
				"cle",
				"clean_disambiguation\tfunction"
			],
			[
				"is_",
				"is_nothing\tfunction"
			],
			[
				"find",
				"find_all"
			],
			[
				"code",
				"code_blocks\tstatement"
			],
			[
				"clean",
				"clean_article_paragraphs\tfunction"
			],
			[
				"query",
				"query_string\tstatement"
			],
			[
				"raw",
				"raw_page\tstatement"
			],
			[
				"max",
				"max_cols\tstatement"
			],
			[
				"line",
				"line_list\tstatement"
			],
			[
				"lien",
				"line_wrap\tfunction"
			],
			[
				"para",
				"paragraphs\tstatement"
			],
			[
				"parag",
				"paragraph"
			],
			[
				"clea",
				"clean_paragraphs\tfunction"
			],
			[
				"pa",
				"paragraphs\tstatement"
			],
			[
				"text",
				"text_list"
			],
			[
				"ter",
				"term_width\tstatement"
			],
			[
				"st",
				"stdscr\tstatement"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#!/usr/bin/env python\n\nfrom sqlalchemy import create_engine, MetaData, Table\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom db.db_models import File\nfrom config import Config\n\n\napp = Config\napp.set_env(app, 'dev')\nconf = app.conf\n\n\ndef connect(user, password, db, host='localhost', port=5432):\n    url = 'postgresql://{}:{}@{}:{}/{}'\n    url = url.format(user, password, host, port, db)\n    con = create_engine(url, client_encoding='utf8')\n    meta = MetaData(bind=con, reflect=True)\n    return con, meta\n\n\ndef fschk_connect():\n    return connect(\n        conf['PG_USER'],\n        conf['PG_PWORD'],\n        conf['PG_DB'],\n        conf['PG_HOST'],\n        conf['PG_PORT']\n    )\n\n\ndef create_table(model):\n    con, meta = fschk_connect()\n    Base = declarative_base()\n\n    class TableFactory(model, Base):\n        __tablename__ = model.__tablename__\n\n    Base.metadata.create_all(bind=con)\n    con.close()\n\n\ndef select(table=None, column=[], value=[]):\n    con, meta = fschk_connect()\n    if not column:\n        s = meta.tables[table]\n        result = s.execute()\n        print(result)\n    elif column and not value:\n        s = meta.tables[table]\n        result = s.execute()\n    elif column and value:\n        s = meta.tables[table]\n        result = s.execute()\n\n    con.close()\n    return result\n\n\ndef insert_row(table, columns={}):\n    con, meta = fschk_connect()\n    cols = [columns]\n    con.execute(meta.tables[table].insert(), cols)\n    con.close()\n\n\ndef insert_rows(table, columns={}):\n    con, meta = fschk_connect()\n    cols = [columns]\n    for col in cols:\n        con.execute(meta.tables[table].insert(), col)\n    con.close()\n\n\ndef update_row(table, columns={}):\n    con, meta = fschk_connect()\n    # select -> insert\n    con.close()\n\n\ndef db_is_instantiated():\n    try:\n        select()\n        return False\n    except KeyError:\n        return True\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n",
			"file": "db/dbs.py",
			"file_size": 1777,
			"file_write_time": 131314579960000000,
			"settings":
			{
				"buffer_size": 1937,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#!/usr/bin/env python3\n\n\nimport os\nimport stat\nimport subprocess\nimport xattr\nfrom chardet.universaldetector import UniversalDetector\nfrom models import File\n\n\ndef traverse(target_dir):\n\n        file_list = []\n        for root, dirs, files in os.walk(target_dir, topdown=False):\n            for name in files:\n                file_list.append(name)\n        return file_list\n\n\ndef traverse_gen(target_dir):\n    # Write list of files to traverse to tmp_file(s)\n    # Prevents loading huge list of files into memory.\n    tmp_list = './tmp_list.txt'\n    with open(tmp_list, 'w') as f:\n        for root, dirs, files in os.walk(target_dir, topdown=False):\n            for name in files:\n                f.write(os.path.join(root, name) + '\\n')\n\n    # Get line count for generator loop without spending the generator\n    # line_count = int(os.popen('wc -l ' + tmp_list).read().split()[0])\n\n    # Generator from tmp_list of /paths/to/files to operate on\n    with open(tmp_list, 'r') as f:\n        for line in f:\n            yield f.readline().strip('\\n')\n    return tmp_list\n\n\ndef traverse_gen_cleanup(target_dir):\n    \"\"\"\n        Just want to get rid of the tmp file(s) created for\n        the directory tree traversal with a separate function.\n    \"\"\"\n    try:\n        tmp_file_list = open('./tmp_list.txt', 'r')\n        tmp_file_list.close()\n    except FileNotFoundError:\n        print('No tmp_list.txt')\n    except IOError as err:\n        print(err)\n    subprocess.call(['rm', '-f', './tmp_list.txt'])\n    return 'tmp_list cleaned'\n\n\ndef detect_file_encoding(fname):\n    # Heuristic, takes forever, run async\n    detector = UniversalDetector()\n    for line in open(fname, 'rb'):\n        detector.feed(line)\n        if detector.done:\n            break\n    detector.close()\n    print(fname, 'File Encoding:', detector.result)\n    return detector.result\n\n\ndef detect_mime_type(fname):\n    pass\n\n\ndef finfo(fname):\n    f = File\n    info = os.stat(fname)\n    print('File Name:', fname)\n    name = fname.split('/')\n    file_name = name[len(name) - 1]\n    f.name = file_name\n    print('File Name:', f.name)\n    root_path = os.path.realpath(fname).split('/')\n    f.root_path = '/'.join(root_path[0:len(root_path) - 1]) + '/'\n    print('File Root Path:', f.root_path)\n    f.size = info.st_size\n    print('File Size:', f.size)\n    f.permissions = oct(os.stat(fname).st_mode)[-3:]\n    print('File Permissions:', f.permissions)\n    f.inode = info.st_ino\n    print('File Inode:', f.inode)\n    f.owner = info.st_uid\n    print('File Owner:', f.owner)\n    f.group = info.st_gid\n    print('File Group Owner:', f.group)\n    f.last_modified = info.st_mtime\n    print('File Last Modified:', f.last_modified)\n    f.file_type = stat.S_IFMT(info.st_mode)\n    print('File Type:', f.file_type)\n    f.ext_attr = xattr.xattr(fname)\n    print('File Extended Attributes', f.ext_attr.keys())\n    return f\n\n\ndef main():\n    pass\n\n\nif __name__ == '__main__':\n    main()\n",
			"file": "utils/fsnav.py",
			"file_size": 2910,
			"file_write_time": 131314490490000000,
			"settings":
			{
				"buffer_size": 2934,
				"line_ending": "Unix"
			}
		},
		{
			"file": "db/db_models.py",
			"settings":
			{
				"buffer_size": 1865,
				"line_ending": "Unix"
			}
		},
		{
			"file": "fschk.py",
			"settings":
			{
				"buffer_size": 1337,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 187.0,
		"last_filter": "rem",
		"selected_items":
		[
			[
				"rem",
				"Package Control: Remove Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"ins",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/schroder/work/fschk",
		"/Users/schroder/work/fschk/utils"
	],
	"file_history":
	[
		"/Users/schroder/work/fschk/db/db_models.py",
		"/Users/schroder/work/fschk/config.py",
		"/Users/schroder/work/fschk/models/File.py",
		"/Users/schroder/work/fschk/utils/parse_args.py",
		"/Users/schroder/work/fschk/constants/mimetypes.json",
		"/Users/schroder/work/fschk/.gitignore",
		"/Users/schroder/work/fschk/fschk.sublime-project",
		"/Users/schroder/work/fschk/models/Directories.py",
		"/Users/schroder/work/fschk/utils/fsnav.py",
		"/Users/schroder/work/fschk/app/config.py",
		"/Users/schroder/work/fschk/utils/diff_utils.py",
		"/Users/schroder/work/fschk/tests/hash_utils_tests.py",
		"/Users/schroder/work/fschk/test_fschk.py",
		"/Users/schroder/work/fschk/constants/file_extensions.json",
		"/Users/schroder/work/fschk/db/dbs.py",
		"/Users/schroder/work/fschk/fschk.py",
		"/Users/schroder/work/fschk/constants/__init__.py",
		"/Users/schroder/work/fschk/utils/hash_utils.py",
		"/Users/schroder/work/fschk/tests/fsnav_test.py",
		"/Users/schroder/work/fschk/__init__.py",
		"/Users/schroder/work/fschk/app/__init__.py",
		"/Users/schroder/work/fschk/tests/__init__.py",
		"/Users/schroder/work/fschk/models/Opsys.py",
		"/Users/schroder/work/fschk/db/models.py",
		"/Users/schroder/work/fschk/config",
		"/Users/schroder/work/fschk/docker-entrypoint.sh",
		"/Users/schroder/work/fschk/Dockerfile",
		"/Users/schroder/work/fschk/db/db_connect.py",
		"/Users/schroder/work/fschk/db/__init__.py",
		"/Users/schroder/work/clikipedia/wiki.py",
		"/Users/schroder/work/clikipedia/sources/wikipedia.py",
		"/Users/schroder/work/clikipedia/utils/scrape.py",
		"/Users/schroder/work/clikipedia/sources/scrape.py",
		"/Users/schroder/.git-completion.bash",
		"/Users/schroder/work/fschk/models/__init__.py",
		"/Users/schroder/work/fschk/utils/__init__.py",
		"/Users/schroder/Downloads/Bitwig Studio v1.3.14 (All OS) [dada]/Bitwig Studio v1.3.14/macOS/CRACK/bitwig.jar",
		"/Users/schroder/work/clikipedia/utils/parsers.py",
		"/opt/local/etc/tor/torrc.sample",
		"/Users/schroder/work/clikipedia/sources/wiktionary.py",
		"/Users/schroder/work/clikipedia/utils/__init__.py",
		"/Users/schroder/work/clikipedia/sources/__init__.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Base",
			"\"",
			"POSTGRES",
			" = ''",
			"'%s'",
			"''",
			"}",
			"\\s+',",
			"}",
			"\\s',",
			"(^\\w+.*$)",
			"(\\w+/\\w+.*$)",
			"(^.\\w+)(\\s+)",
			"'ext': \\w",
			"description':\\n",
			"description': ",
			"}",
			"('ext': )(.+)\\n('description': )(.)(.+)\\n('used_by': )(.*)",
			"(^'used_by':)(.*)(\\n)",
			"(^'used_by.*')(\\n)",
			"(^'ext')",
			"(^)(VM\\d{4}:\\d )",
			"(\\n)VM\\d+:\\d",
			"(^'used_by.*')(\\n)",
			"(\\n'ext')",
			"\\n'ext'",
			"('ext': )(.+)\\n('description': )( )(.+)\\n('used_by': )(.*)",
			"(^)(VM\\d{4}:\\d )(.+\\n)(VM\\d{4}:\\d)(.+\\n)(VM\\d{4}:\\d)",
			"2VM\\d{4}",
			"2VM",
			"WAI",
			"('ext': )(.+)\\n('description': )( )(.+)\\n('used_by': )(.*)",
			"(^)(VM\\d{4}:\\d )(.+\\n)(VM\\d{4}:\\d)(.+\\n)(VM\\d{4}:\\d)",
			"(\\n)(^'ext)",
			"2VM\\d+:1 ",
			"('ext': )(.+)\\n('description': )( )(.+)\\n('used_by': )(.*)",
			"('ext': )(.+)\\n('description': )( )(.+)\\n('used_by': )(.+)",
			"('ext': )(.+)",
			"'ext': (.+)",
			"(^)(VM\\d{4}:\\d )",
			"(^)(VM\\d{4}:\\d )(.+\\n)(VM\\d{4}:\\d)(.+\\n)(VM\\d{4}:\\d)",
			"(^)(VM\\d{4}:\\d)(.+\\n)(VM\\d{4}:\\d)(.+\\n)(VM\\d{4}:\\d)",
			"(^VM\\d{4}:\\d)(.+\\n)(VM\\d{4}:\\d)(.+\\n)(VM\\d{4}:\\d)",
			"(VM\\d{4}:\\d)(.+\\n)(VM\\d{4}:\\d)(.+\\n)(VM\\d{4}:\\d)",
			"os_info",
			"h2",
			"h1",
			"h1s"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"'",
			"PG",
			", ",
			"'%s', ",
			"Column()",
			"},",
			"',",
			"},",
			",",
			"'doctype': '\\1',",
			"\\n'mimetype':'\\1'}",
			"{'ext': '\\1',\\n",
			"},",
			"\\1'\\2',\\n\\3'\\5',\\n\\6'\\7'}",
			"\\1'\\2',\\3'\\5',\\6'\\7'}",
			"\\1'\\2',\\3},",
			"{\\1",
			"",
			",",
			"\\1\\2}",
			"{\\1",
			"{",
			"\\1'\\2',\\n\\3'\\5',\\n\\6'\\7'\\n",
			"\\1'ext': \\3'description': \\5'used_by':",
			"VM1226",
			"VM",
			"\\1'\\2',\\n\\3'\\5',\\n\\6'\\7'\\n",
			"\\1'ext': \\3'description': \\5'used_by':",
			"{\\1\\2",
			"",
			"\\1'\\2',\\n\\3'\\5',\\n\\6'\\7'\\n",
			"\\1'\\2',\\3'\\5', ''",
			"\\1'\\2'",
			"'\\1',",
			"",
			"\\1'ext': \\3'description': \\5'used_by':",
			"\\1'ext': '\\3'description': \\5'used_by':",
			"\\$\\1'ext': '\\3'description': \\5'used_by':",
			"\\$\\1'ext': \"\\u\\2\",\\n\\3'description': \\5'used_by':",
			"\\1'ext': \"$2\",\\n\\3'description': \\5'used_by':",
			"\\1'ext': \"$ 2\",\\n\\3'description': \\5'used_by':",
			"\\0^'ext':\\2'description':\\4'used_by",
			"\\1'ext':\\3'description':\\3'used_by':",
			"\\1'ext': $2'$2',\\3'description': '\\4',\\5'used_by':",
			"\\1'ext': '$2', \\3'description': '\\4',\\5'used_by':",
			"\\1'ext': '\\2',\\3'description': '\\4',\\5'used_by':",
			"\\1'ext':\\3'description':\\3'used_by':",
			"\\0^'ext':\\2'description':\\4'used_by",
			"\\0'ext':\\2'description':\\4'used_by':",
			"\\1'ext'\\3'description'\\5'used_by'",
			"${0} test",
			"${1} test",
			"$1(test)",
			"info",
			"h4",
			"h3",
			"h2",
			"h2s"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "db/dbs.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1937,
						"regions":
						{
						},
						"selection":
						[
							[
								917,
								917
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 238.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "utils/fsnav.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2934,
						"regions":
						{
						},
						"selection":
						[
							[
								1502,
								1502
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 175.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 2,
					"file": "db/db_models.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1865,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "fschk.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1337,
						"regions":
						{
						},
						"selection":
						[
							[
								460,
								460
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 30.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "fschk.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
